using System.Data;
using System.Data.OracleClient;
using System.Drawing;
using System.IO;
using System.Reflection.PortableExecutable;
using System.Runtime.Intrinsics.Arm;
using System.Text;
using Spire.Additions.Xps.Schema;
using Spire.Pdf;
using Spire.Pdf.Texts;
using Spire.Pdf.Utilities;
using static System.Runtime.InteropServices.JavaScript.JSType;

//Create a PdfDocument object
Spire.Pdf.PdfDocument doc = new Spire.Pdf.PdfDocument();
bool flag = false;
bool isNumeric;
//Load the sample PDF file
int n;
Console.WriteLine($"sql script file is generated in this path:  {AppDomain.CurrentDomain.BaseDirectory}sqlScript.txt");
Console.WriteLine("uncomment coding block to run transactions into oracle DB after adding connection string in app settings file or in code");
doc.LoadFromFile($"{AppDomain.CurrentDomain.BaseDirectory}MR12052023.pdf");
Console.WriteLine("wait until sql script generated here......");
//Create a StringBuilder object

StringBuilder builder = new StringBuilder();
StringBuilder sql = new StringBuilder();
builder.AppendLine("CREATE TABLE operations( op_id NUMBER GENERATED BY DEFAULT AS IDENTITY,from_to varchar2(20) NOT NULL,hrs number(2,2) NOT NULL,lateral number(1) NOT NULL,phase varchar2(20) NOT NULL,cat CHAR(1) NOT NULL,major_op varchar2(20) NOT NULL,action varchar2(20) NOT NULL,object varchar2(20) NULL,resp varchar2(20) NOT NULL,hole_depth_start number(4) NOT NULL,hole_depth_end number(4) NOT NULL,event_depth_start number(4) NULL,event_depth_end number(4) NULL,summary varchar2(300) NOT NULL, CONSTRAINT operations_pk PRIMARY KEY (op_id));");

//Initialize an instance of PdfTableExtractor class
PdfTableExtractor extractor = new PdfTableExtractor(doc);


//Declare a PdfTable array

PdfTable[] tableList = null;


tableList = extractor.ExtractTable(0);

//Determine if the table list is null

if (tableList != null && tableList.Length > 0)
{

    foreach (PdfTable table in tableList)
    {

        //Get row number and column number of a certain table
        int row = table.GetRowCount();

        int column = table.GetColumnCount();

        //Loop though the row and colunm
        for (int i = 0; i < row; i++)
        {

            for (int j = 0; j < column; j++)
            {

                //Get text from the specific cell
                string text = table.GetText(i, j);
                if (j == 0 && (!text.StartsWith("(From") && !string.IsNullOrEmpty(text) && !Char.IsDigit(text[0])))
                {
                    continue;
                }
                if (text.StartsWith("(From"))
                {
                    flag = true;

                    break;
                }
                //Add text to the string builder
                if (j == 0 && flag && !string.IsNullOrEmpty(text))
                {
                    sql.AppendLine($"insert into operations (from_to,hrs,Lateral,phase,cat,major_op,action,object,resp,hole_depth_start,hole_depth_end,event_depth_start,event_depth_end,summary) values (");
                }
                else if (j == 0 && flag && string.IsNullOrEmpty(text))
                {
                    break;
                }
                if (flag & !string.IsNullOrEmpty(text))
                {
                    if (sql.ToString().Split(",").Length < 27 && text.Length > 20)
                    {
                        sql.Append("NULL,NULL,");
                    }

                    isNumeric = int.TryParse(text.Replace(".", "").Trim(), out n);
                    if (isNumeric) { sql.Append(text.Replace("\n", "")); }
                    else
                        sql.Append("'" + text.Replace("\n", "") + "' ");
                    if (!string.IsNullOrEmpty(text) && text.Length < 30)
                    {
                        sql.Append(",");
                    }
                }
                // else if(flag) { sql.Append("NULL,"); }

            }
            if (flag)
            {
                if (sql.ToString().Length > 0)
                {
                    sql.Append(");");
                    builder.AppendLine(sql.ToString());
                    sql.Clear();
                }
            }

        }

    }

}
if (builder.ToString().Length > 0)
{
    //Write to a .txt file
    File.WriteAllText("sqlScript.txt", builder.ToString());

    //add connection string in app settings file or here
    //uncomment this block to run transactions into oracle DB
    //using (OracleConnection con = new OracleConnection("connectionString"))
    //{
    //    con.Open();
    //    Console.WriteLine("Connected to Oracle Database {0}", con.ServerVersion);

    //    OracleCommand cmd = con.CreateCommand();
    //    cmd.CommandText = builder.ToString();
    //    cmd.ExecuteNonQuery();
    //}
    Console.Write(builder.ToString());
    Console.ReadLine();
}




